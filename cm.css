<!DOCTYPE html>

<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>마법소녀 프로필 편집기</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700;900&display=swap');

```
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }
    
    body {
        font-family: 'Courier New', 'Orbitron', monospace;
        background: #0a0a0a;
        color: #e0e0e0;
        line-height: 1.4;
        padding: 20px;
        background-image: 
            radial-gradient(circle at 25% 25%, #111 1px, transparent 1px),
            radial-gradient(circle at 75% 75%, #111 1px, transparent 1px);
        background-size: 20px 20px;
        min-height: 100vh;
    }
    
    .container {
        max-width: 900px;
        margin: 0 auto;
        background: #1a1a1a;
        border: 3px solid #333;
        box-shadow: 
            0 0 0 1px #666,
            inset 0 0 0 1px #000,
            0 0 20px rgba(255,255,255,0.1);
        position: relative;
    }
    
    .container::before {
        content: '';
        position: absolute;
        top: -3px;
        left: -3px;
        right: -3px;
        bottom: -3px;
        background: linear-gradient(45deg, #444, #222, #444, #222);
        z-index: -1;
    }
    
    .header {
        background: #000;
        border-bottom: 2px solid #333;
        padding: 15px 20px;
        text-align: center;
        position: relative;
    }
    
    .header::after {
        content: '';
        position: absolute;
        bottom: -2px;
        left: 0;
        right: 0;
        height: 2px;
        background: linear-gradient(90deg, transparent, #666, transparent);
    }
    
    .title {
        font-size: 24px;
        font-weight: 900;
        letter-spacing: 3px;
        text-transform: uppercase;
        color: #fff;
        text-shadow: 2px 2px 0 #000, -1px -1px 0 #333;
    }
    
    .subtitle {
        font-size: 12px;
        color: #888;
        margin-top: 5px;
        letter-spacing: 2px;
    }
    
    .controls {
        background: #222;
        border-bottom: 1px solid #333;
        padding: 10px 20px;
        display: flex;
        justify-content: center;
        gap: 10px;
    }
    
    .btn {
        background: #333;
        border: 2px solid #555;
        color: #ccc;
        padding: 8px 16px;
        font-family: inherit;
        font-size: 12px;
        text-transform: uppercase;
        letter-spacing: 1px;
        cursor: pointer;
        transition: all 0.2s;
    }
    
    .btn:hover {
        background: #444;
        border-color: #777;
        color: #fff;
    }
    
    .btn:active {
        background: #222;
    }
    
    .content {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
        padding: 20px;
    }
    
    .profile-section {
        grid-column: 1 / -1;
        display: grid;
        grid-template-columns: 220px 1fr;
        gap: 20px;
        margin-bottom: 10px;
    }
    
    .profile-image-container {
        position: relative;
    }
    
    .profile-image {
        width: 220px;
        height: 220px;
        border: 3px solid #333;
        background: #111;
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
        box-shadow: inset 0 0 10px rgba(0,0,0,0.5);
        cursor: pointer;
        overflow: hidden;
    }
    
    .profile-image:hover {
        border-color: #555;
    }
    
    .profile-image::before {
        content: '📷\ACLICK TO UPLOAD';
        font-size: 32px;
        opacity: 0.4;
        text-align: center;
        white-space: pre;
        line-height: 1.2;
    }
    
    .profile-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        filter: contrast(1.2) grayscale(0.8);
    }
    
    .profile-image input[type="file"] {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        opacity: 0;
        cursor: pointer;
    }
    
    .remove-image {
        position: absolute;
        top: 5px;
        right: 5px;
        background: #ff0000;
        color: white;
        border: none;
        width: 20px;
        height: 20px;
        font-size: 12px;
        cursor: pointer;
        display: none;
    }
    
    .basic-info {
        background: #111;
        border: 2px solid #333;
        padding: 15px;
    }
    
    .info-row {
        display: flex;
        margin-bottom: 8px;
        font-size: 14px;
        align-items: center;
    }
    
    .info-label {
        width: 80px;
        color: #aaa;
        font-weight: bold;
    }
    
    .info-value {
        color: #fff;
        flex: 1;
    }
    
    .section {
        background: #111;
        border: 2px solid #333;
        margin-bottom: 20px;
    }
    
    .section-header {
        background: #222;
        border-bottom: 1px solid #333;
        padding: 10px 15px;
        font-size: 14px;
        font-weight: bold;
        text-transform: uppercase;
        letter-spacing: 1px;
        color: #ccc;
    }
    
    .section-content {
        padding: 15px;
    }
    
    .stats-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 15px;
    }
    
    .stat-item {
        margin-bottom: 15px;
    }
    
    .stat-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 5px;
    }
    
    .stat-label {
        font-size: 12px;
        color: #aaa;
        text-transform: uppercase;
        letter-spacing: 1px;
    }
    
    .stat-input {
        background: transparent;
        border: 1px solid #444;
        color: #fff;
        width: 50px;
        text-align: center;
        font-family: inherit;
        font-size: 10px;
        padding: 2px;
    }
    
    .stat-input:focus {
        outline: none;
        border-color: #777;
        background: #222;
    }
    
    .stat-bar {
        background: #000;
        border: 1px solid #333;
        height: 20px;
        position: relative;
        box-shadow: inset 0 0 5px rgba(0,0,0,0.5);
    }
    
    .stat-fill {
        background: linear-gradient(90deg, #333, #666, #333);
        height: 100%;
        position: relative;
        transition: width 0.3s ease;
    }
    
    .stat-fill::after {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.1), transparent);
    }
    
    .stat-value {
        position: absolute;
        right: 5px;
        top: 50%;
        transform: translateY(-50%);
        font-size: 10px;
        font-weight: bold;
        color: #fff;
        text-shadow: 1px 1px 0 #000;
    }
    
    .description {
        font-size: 13px;
        line-height: 1.6;
        color: #ccc;
    }
    
    .magic-theme {
        margin-top: 15px;
    }
    
    .theme-tags {
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
        margin-bottom: 10px;
    }
    
    .theme-tag {
        background: #222;
        border: 1px solid #444;
        padding: 4px 8px;
        font-size: 11px;
        text-transform: uppercase;
        letter-spacing: 1px;
        color: #aaa;
        position: relative;
        cursor: pointer;
    }
    
    .theme-tag:hover {
        background: #333;
        border-color: #555;
    }
    
    .theme-tag .remove-tag {
        position: absolute;
        top: -5px;
        right: -5px;
        background: #ff0000;
        color: white;
        border: none;
        width: 15px;
        height: 15px;
        font-size: 10px;
        border-radius: 50%;
        cursor: pointer;
        display: none;
    }
    
    .theme-tag:hover .remove-tag {
        display: block;
    }
    
    .add-tag {
        display: flex;
        gap: 5px;
        align-items: center;
    }
    
    .tag-input {
        background: transparent;
        border: 1px dashed #555;
        color: #ccc;
        padding: 4px 8px;
        font-family: inherit;
        font-size: 11px;
        text-transform: uppercase;
    }
    
    .tag-input:focus {
        outline: none;
        border-color: #777;
        background: #222;
    }
    
    .editable {
        background: transparent;
        border: 1px dashed #555;
        color: #ccc;
        padding: 2px 4px;
        font-family: inherit;
        font-size: inherit;
        width: 100%;
    }
    
    .editable:focus {
        outline: none;
        border-color: #777;
        background: #222;
    }
    
    textarea.editable {
        min-height: 100px;
        resize: vertical;
    }
    
    .glitch {
        position: relative;
        animation: glitch 3s infinite;
    }
    
    @keyframes glitch {
        0%, 100% { transform: translate(0); }
        20% { transform: translate(-1px, 1px); }
        40% { transform: translate(-1px, -1px); }
        60% { transform: translate(1px, 1px); }
        80% { transform: translate(1px, -1px); }
    }
    
    .notification {
        position: fixed;
        top: 20px;
        right: 20px;
        background: #222;
        border: 2px solid #555;
        color: #fff;
        padding: 10px 15px;
        font-size: 12px;
        opacity: 0;
        transition: opacity 0.3s;
        z-index: 1000;
    }
    
    .notification.show {
        opacity: 1;
    }
    
    .export-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0,0,0,0.8);
        display: none;
        align-items: center;
        justify-content: center;
        z-index: 2000;
    }
    
    .export-dialog {
        background: #1a1a1a;
        border: 3px solid #333;
        padding: 20px;
        text-align: center;
        box-shadow: 0 0 20px rgba(255,255,255,0.1);
    }
    
    .loading-spinner {
        width: 40px;
        height: 40px;
        border: 3px solid #333;
        border-top: 3px solid #666;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin: 0 auto 15px;
    }
    
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
```

</head>
<body>
    <div class="notification" id="notification"></div>

```
<div class="export-overlay" id="exportOverlay">
    <div class="export-dialog">
        <div class="loading-spinner"></div>
        <div>이미지를 생성하고 있습니다...</div>
    </div>
</div>

<div class="container">
    <div class="header">
        <div class="title glitch">MAGICAL GIRL</div>
        <div class="subtitle">PROFILE DATABASE - EDITOR</div>
    </div>
    
    <div class="controls">
        <button class="btn" onclick="saveProfile()">저장</button>
        <button class="btn" onclick="loadProfile()">불러오기</button>
        <button class="btn" onclick="resetProfile()">초기화</button>
        <button class="btn" onclick="exportProfile()">JSON 내보내기</button>
        <button class="btn" onclick="exportAsImage()">이미지 내보내기</button>
    </div>
    
    <div class="content">
        <div class="profile-section">
            <div class="profile-image-container">
                <div class="profile-image" id="profileImage">
                    <input type="file" id="imageUpload" accept="image/*">
                </div>
                <button class="remove-image" id="removeImage" onclick="removeProfileImage()">×</button>
            </div>
            
            <div class="basic-info">
                <div class="section-header">기본 정보</div>
                <div class="section-content">
                    <div class="info-row">
                        <span class="info-label">이름:</span>
                        <input type="text" class="editable info-value" id="name" value="사쿠라 미즈키">
                    </div>
                    <div class="info-row">
                        <span class="info-label">나이:</span>
                        <input type="text" class="editable info-value" id="age" value="16">
                    </div>
                    <div class="info-row">
                        <span class="info-label">등급:</span>
                        <input type="text" class="editable info-value" id="rank" value="S급">
                    </div>
                    <div class="info-row">
                        <span class="info-label">소속:</span>
                        <input type="text" class="editable info-value" id="affiliation" value="달빛 마법소녀 연합">
                    </div>
                    <div class="info-row">
                        <span class="info-label">계약일:</span>
                        <input type="date" class="editable info-value" id="contractDate" value="2024-03-15">
                    </div>
                </div>
            </div>
        </div>
        
        <div class="section">
            <div class="section-header">능력치</div>
            <div class="section-content">
                <div class="stats-grid">
                    <div class="stat-item">
                        <div class="stat-header">
                            <div class="stat-label">마법소녀 적성</div>
                            <input type="number" class="stat-input" min="0" max="100" value="85" onchange="updateStat(this, 'aptitude')">
                        </div>
                        <div class="stat-bar">
                            <div class="stat-fill" id="aptitude-fill" style="width: 85%"></div>
                            <div class="stat-value" id="aptitude-value">85/100</div>
                        </div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-header">
                            <div class="stat-label">공격력</div>
                            <input type="number" class="stat-input" min="0" max="100" value="70" onchange="updateStat(this, 'attack')">
                        </div>
                        <div class="stat-bar">
                            <div class="stat-fill" id="attack-fill" style="width: 70%"></div>
                            <div class="stat-value" id="attack-value">70/100</div>
                        </div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-header">
                            <div class="stat-label">방어력</div>
                            <input type="number" class="stat-input" min="0" max="100" value="60" onchange="updateStat(this, 'defense')">
                        </div>
                        <div class="stat-bar">
                            <div class="stat-fill" id="defense-fill" style="width: 60%"></div>
                            <div class="stat-value" id="defense-value">60/100</div>
                        </div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-header">
                            <div class="stat-label">마나 효율</div>
                            <input type="number" class="stat-input" min="0" max="100" value="90" onchange="updateStat(this, 'mana')">
                        </div>
                        <div class="stat-bar">
                            <div class="stat-fill" id="mana-fill" style="width: 90%"></div>
                            <div class="stat-value" id="mana-value">90/100</div>
                        </div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-header">
                            <div class="stat-label">민첩성</div>
                            <input type="number" class="stat-input" min="0" max="100" value="75" onchange="updateStat(this, 'agility')">
                        </div>
                        <div class="stat-bar">
                            <div class="stat-fill" id="agility-fill" style="width: 75%"></div>
                            <div class="stat-value" id="agility-value">75/100</div>
                        </div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-header">
                            <div class="stat-label">정신력</div>
                            <input type="number" class="stat-input" min="0" max="100" value="95" onchange="updateStat(this, 'mental')">
                        </div>
                        <div class="stat-bar">
                            <div class="stat-fill" id="mental-fill" style="width: 95%"></div>
                            <div class="stat-value" id="mental-value">95/100</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="section">
            <div class="section-header">마법 & 테마</div>
            <div class="section-content">
                <div class="info-row">
                    <span class="info-label">주 속성:</span>
                    <input type="text" class="editable info-value" id="mainAttribute" value="빛/치유">
                </div>
                <div class="info-row">
                    <span class="info-label">무기:</span>
                    <input type="text" class="editable info-value" id="weapon" value="문라이트 크리스털 스태프">
                </div>
                <div class="magic-theme">
                    <div class="theme-tags" id="themeTags">
                        <div class="theme-tag">HEALING<button class="remove-tag" onclick="removeTag(this)">×</button></div>
                        <div class="theme-tag">LIGHT MAGIC<button class="remove-tag" onclick="removeTag(this)">×</button></div>
                        <div class="theme-tag">BARRIER<button class="remove-tag" onclick="removeTag(this)">×</button></div>
                        <div class="theme-tag">PURIFICATION<button class="remove-tag" onclick="removeTag(this)">×</button></div>
                    </div>
                    <div class="add-tag">
                        <input type="text" class="tag-input" id="newTag" placeholder="새 태그" onkeypress="handleTagEnter(event)">
                        <button class="btn" onclick="addTag()">추가</button>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="section" style="grid-column: 1 / -1;">
            <div class="section-header">해석 & 설명</div>
            <div class="section-content">
                <textarea class="editable description" id="description">뛰어난 치유 능력과 방어 마법에 특화된 서포트형 마법소녀입니다.
```

높은 정신력으로 어려운 상황에서도 냉정함을 유지하며, 팀원들을 보호하는 것을 최우선으로 하는 희생적 성격을 가지고 있습니다.

빛의 마법으로 적의 어둠을 정화하는 특별한 능력을 보유하고 있으며, 달빛 아래에서 마법 효율이 크게 증가합니다.

전투 스타일은 직접적인 공격보다는 아군 지원과 적 무력화에 중점을 두고 있으며, 크리스털 스태프를 통해 강력한 치유 마법과 방어막을 전개할 수 있습니다.</textarea>
</div>
</div>
</div>
</div>

```
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
<script>
    let profileData = {};

    // 이미지 업로드 처리
    document.getElementById('imageUpload').addEventListener('change', function(e) {
        const file = e.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function(e) {
                const img = document.createElement('img');
                img.src = e.target.result;
                const container = document.getElementById('profileImage');
                container.innerHTML = '';
                container.appendChild(img);
                container.appendChild(document.getElementById('imageUpload'));
                document.getElementById('removeImage').style.display = 'block';
            };
            reader.readAsDataURL(file);
        }
    });

    // 이미지 제거
    function removeProfileImage() {
        const container = document.getElementById('profileImage');
        container.innerHTML = '<input type="file" id="imageUpload" accept="image/*">';
        document.getElementById('removeImage').style.display = 'none';
        // 이벤트 리스너 재등록
        document.getElementById('imageUpload').addEventListener('change', arguments.callee);
    }

    // 스탯 업데이트
    function updateStat(input, statName) {
        const value = parseInt(input.value);
        const percentage = Math.min(100, Math.max(0, value));
        
        document.getElementById(statName + '-fill').style.width = percentage + '%';
        document.getElementById(statName + '-value').textContent = percentage + '/100';
        
        input.value = percentage;
    }

    // 태그 추가
    function addTag() {
        const input = document.getElementById('newTag');
        const tagText = input.value.trim().toUpperCase();
        
        if (tagText) {
            const tagContainer = document.getElementById('themeTags');
            const tagElement = document.createElement('div');
            tagElement.className = 'theme-tag';
            tagElement.innerHTML = tagText + '<button class="remove-tag" onclick="removeTag(this)">×</button>';
            tagContainer.appendChild(tagElement);
            input.value = '';
        }
    }

    // 태그 제거
    function removeTag(button) {
        button.parentElement.remove();
    }

    // Enter 키로 태그 추가
    function handleTagEnter(event) {
        if (event.key === 'Enter') {
            addTag();
        }
    }

    // 프로필 저장 (메모리에)
    function saveProfile() {
        profileData = {
            name: document.getElementById('name').value,
            age: document.getElementById('age').value,
            rank: document.getElementById('rank').value,
            affiliation: document.getElementById('affiliation').value,
            contractDate: document.getElementById('contractDate').value,
            mainAttribute: document.getElementById('mainAttribute').value,
            weapon: document.getElementById('weapon').value,
            description: document.getElementById('description').value,
            stats: {
                aptitude: document.querySelector('[onchange="updateStat(this, \'aptitude\')"]').value,
                attack: document.querySelector('[onchange="updateStat(this, \'attack\')"]').value,
                defense: document.querySelector('[onchange="updateStat(this, \'defense\')"]').value,
                mana: document.querySelector('[onchange="updateStat(this, \'mana\')"]').value,
                agility: document.querySelector('[onchange="updateStat(this, \'agility\')"]').value,
                mental: document.querySelector('[onchange="updateStat(this, \'mental\')"]').value
            },
            tags: Array.from(document.querySelectorAll('.theme-tag')).map(tag => 
                tag.textContent.replace('×', '').trim()
            )
        };
        showNotification('프로필이 저장되었습니다!');
    }

    // 프로필 불러오기
    function loadProfile() {
        if (Object.keys(profileData).length === 0) {
            showNotification('저장된 프로필이 없습니다!');
            return;
        }

        document.getElementById('name').value = profileData.name || '';
        document.getElementById('age').value = profileData.age || '';
        document.getElementById('rank').value = profileData.rank || '';
        document.getElementById('affiliation').value = profileData.affiliation || '';
        document.getElementById('contractDate').value = profileData.contractDate || '';
        document.getElementById('mainAttribute').value = profileData.mainAttribute || '';
        document.getElementById('weapon').value = profileData.weapon || '';
        document.getElementById('description').value = profileData.description || '';

        // 스탯 로드
        if (profileData.stats) {
            Object.keys(profileData.stats).forEach(stat => {
                const input = document.querySelector(`[onchange="updateStat(this, '${stat}')"]`);
                if (input) {
                    input.value = profileData.stats[stat];
                    updateStat(input, stat);
                }
            });
        }

        // 태그 로드
        if (profileData.tags) {
            const tagContainer = document.getElementById('themeTags');
            tagContainer.innerHTML = '';
            profileData.tags.forEach(tagText => {
                const tagElement = document.createElement('div');
                tagElement.className = 'theme-tag';
                tagElement.innerHTML = tagText + '<button class="remove-tag" onclick="removeTag(this)">×</button>';
                tagContainer.appendChild(tagElement);
            });
        }

        showNotification('프로필이 불러와졌습니다!');
    }

    // 프로필 초기화
    function resetProfile() {
        if (confirm('정말로 모든 내용을 초기화하시겠습니까?')) {
            location.reload();
        }
    }

    // 프로필 내보내기 (JSON)
    function exportProfile() {
        saveProfile(); // 현재 상태 저장
        const dataStr = JSON.stringify(profileData, null, 2);
        const dataBlob = new Blob([dataStr], {type: 'application/json'});
        const url = URL.createObjectURL(dataBlob);
        const link = document.createElement('a');
        link.href = url;
        link.download = 'magical_girl_profile.json';
        link.click();
        URL.revokeObjectURL(url);
        showNotification('JSON 파일이 내보내졌습니다!');
    }

    // 이미지로 내보내기
    async function exportAsImage() {
        const overlay = document.getElementById('exportOverlay');
        overlay.style.display = 'flex';
        
        try {
            // 임시로 컨트롤 버튼들을 숨김
            const controls = document.querySelector('.controls');
            const originalDisplay = controls.style.display;
            controls.style.display = 'none';
            
            // 편집 가능한 요소들의 테두리 임시 제거
            const editableElements = document.querySelectorAll('.editable, .stat-input');
            const originalStyles = [];
            editableElements.forEach((el, index) => {
                originalStyles[index] = el.style.border;
                el.style.border = 'none';
                el.style.background = 'transparent';
            });
            
            // 태그 제거 버튼들 숨김
            const removeButtons = document.querySelectorAll('.remove-tag, .remove-image');
            removeButtons.forEach(btn => {
                btn.style.display = 'none';
            });
            
            // 프로필 이미지 업로드 input 숨김
            const imageInput = document.getElementById('imageUpload');
            if (imageInput) {
                imageInput.style.display = 'none';
            }
            
            // html2canvas로 캡처
            const canvas = await html2canvas(document.querySelector('.container'), {
                backgroundColor: '#0a0a0a',
                scale: 2, // 고해상도
                useCORS: true,
                allowTaint: true,
                foreignObjectRendering: true,
                logging: false,
                width: 900,
                height: null,
                scrollX: 0,
                scrollY: 0
            });
            
            // 스타일 복원
            controls.style.display = originalDisplay;
            editableElements.forEach((el, index) => {
                el.style.border = originalStyles[index];
            });
            removeButtons.forEach(btn => {
                btn.style.display = '';
            });
            if (imageInput) {
                imageInput.style.display = '';
            }
            
            // 이미지 다운로드
            const link = document.createElement('a');
            link.download = `magical_girl_profile_${Date.now()}.png`;
            link.href = canvas.toDataURL('image/png');
            link.click();
            
            showNotification('프로필 이미지가 저장되었습니다!');
            
        } catch (error) {
            console.error('이미지 내보내기 실패:', error);
            showNotification('이미지 내보내기에 실패했습니다.');
        }
        
        overlay.style.display = 'none';
    }

    // 알림 표시
    function showNotification(message) {
        const notification = document.getElementById('notification');
        notification.textContent = message;
        notification.classList.add('show');
        setTimeout(() => {
            notification.classList.remove('show');
        }, 3000);
    }

    // 페이지 로드 시 스탯 애니메이션
    document.addEventListener('DOMContentLoaded', function() {
        const statFills = document.querySelectorAll('.stat-fill');
        statFills.forEach(fill => {
            const width = fill.style.width;
            fill.style.width = '0%';
            setTimeout(() => {
                fill.style.width = width;
            }, 500);
        });
    });

    // 편집 가능한 요소들에 대한 상호작용
    document.querySelectorAll('.editable').forEach(element => {
        element.addEventListener('focus', function() {
            this.style.background = '#222';
        });
        
        element.addEventListener('blur', function() {
            this.style.background = 'transparent';
        });
    });
</script>
```

</body>
</html>
